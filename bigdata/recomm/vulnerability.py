import pandas as pd
import json

def recomm_vulnerability():
    ##################
    # 데이터 불러오기 #
    ##################

    # 문제목록 불러오기
    df = pd.read_csv('./data/df_problems_tags.csv', index_col=0)

    # 더미데이터 불러오기
    with open('./data/dummy/accountdata.json', 'r', encoding='utf-8') as f:
        json_data = json.load(f)
    dum_raw = json_data['solved']
    dum_raw = pd.DataFrame(dum_raw)

    # 푼 문제 id 리스트
    solved_problems = list(dum_raw.loc[dum_raw['status']=='solved']['id'])


    ##################
    # 취약점 분석 #
    ##################

    # 유저정보 문제목록 병합
    dum = pd.merge(dum_raw, df, how='left', left_on='id', right_on='problemId')
    # 푼 문제 목록 추출
    solved_list = dum.loc[dum['status']=='solved'].sort_values('id')
    # 태그별로 문제 적게 푼 순으로 태그 나열 후 list화
    solved_list = solved_list.groupby('bojTagId').count().sort_values('problemId', ascending=False).reset_index()['bojTagId']
    solved_list = list(solved_list)

    # 푼 문제 평균 레벨 추출
    solved_levels = {}
    for solved_tag in solved_list:
        cond1 = (dum['status']=='solved')
        cond2 = (dum['bojTagId']==solved_tag)
        cond_list = list(dum.loc[cond1&cond2]['level'])
        solved_levels[solved_tag] = int(sum(cond_list)/len(cond_list))


    # 시도 문제 목록 추출
    tried_list = dum.loc[dum['status']=='tried'].sort_values('problemId')
    # 태그별로 시도 많은 순으로 태그 나열 후 list화
    tried_list = tried_list.groupby('bojTagId').count().sort_values('problemId', ascending=True).reset_index()['bojTagId']
    tried_list = list(tried_list)

    # 시도 문제 중 가장 낮은 레벨 추출
    tried_levels = {}
    for tried_tag in tried_list:
        cond1 = (dum['status']=='tried')
        cond2 = (dum['bojTagId']==tried_tag)
        cond_list = list(dum.loc[cond1&cond2]['level'])
        tried_levels[tried_tag] = int(sum(cond_list)/len(cond_list))

    # 추천할 태그 목록
    tag_list = tried_list[:5] + solved_list[:5]
    tag_list = list(set(tag_list))

    print('푼 문제 태그 목록 : ', solved_list)
    print('푼 문제 난이도(내림차순) : ', solved_levels)
    print()
    print('시도 문제 태그 목록 : ', tried_list)
    print('시도 문제 난이도(오름차순) : ', tried_levels)



    ##################
    # 문제 추천 #
    ##################

    # 빈 df 생성
    recomm_df = pd.DataFrame(columns=df.columns)

    # 푼 문제 제외
    df = df.loc[~df['problemId'].isin(solved_problems)]

    # 태그
    for tag in tag_list:
        if tag in solved_levels:
            tag_level = solved_levels[tag]
        elif tag in tried_levels:
            tag_level = tried_levels[tag]
        else:
            print('error')
            tag_level = 0
        print('tag: ', tag, 'tag level: ', tag_level)
        
        recomm_tag_level = [tag_level]
        for i in range(2):
            recomm_tag_level.append(tag_level+(i+1))
            if tag_level-(i+1) >= 0:
                recomm_tag_level.append(tag_level-(i+1))
        print('recomm tag levels: ', sorted(recomm_tag_level))
        
        tmp_df = df.loc[(df['bojTagId']==tag)&(df['level'].isin(recomm_tag_level))]
        tmp_df = tmp_df.sort_values(['acceptedUserCount', 'averageTries'], ascending=[False, True])[:10]
        
        # recomm_df = recomm_df.append(tmp_df)
        recomm_df = pd.concat([recomm_df, tmp_df])


    recomm_df = recomm_df.drop_duplicates('problemId').reset_index()
    recomm_df = recomm_df.sort_values(['acceptedUserCount', 'averageTries'], ascending=[False, True])
    recomm_json = recomm_df.to_json(orient='records')

    return recomm_json